<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAgBAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANjApdDYv
        KEYhO9NNIDzUZTcxKFg2MSldAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADcx
        KYY2MSnJAAAAACA81PQhPdT/IjfAJTYxKtw1MClpAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAA2Mig4NjEq/TUwKl8AAAAAIDzT+yE91P8fOdIoNTEqdzYxKvg0LSUiAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAADYxKpE3Miv/NC4pMQAAAAAgPNP7IT3U/x850ig0MSdNNzIr/zUwKngAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAANjEpgjcyK/81MSt8AAAAACA80/shPdT/HznSKDYxK5o3Miv/NTApaQAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxMScaNzEq7DYxK/k0MSpOIDzT+yE91P8wNFyENjEq/TYx
        Kt8nJycNAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        K/M3Miv/NzIr/zcyK/83Miv/NjEq/jcyK/82MSrdAAAABCA80/shPdT/JTemNzYxKuY3Miv/NzIr/zcy
        K/83Miv/NzIr/zcyK/82MSvtNi8nQQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAOCoqEjcxKVw2MSmHNjEpnzYxKqo2MCmxNjEqszYyKoQAAAAAIDzT+yE91P8iOMAtNTEqnDYx
        KrU3MSqwNjEqqTUwKp02MiqENS8pVicnJw0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAANLh4RHf398I////AdPe4y/N2d8pv///BNLd4UTU299I0NjgIdPd32ljedj6XnPY/LbC
        3obV3OMl1NzgQtHc30nf398I09raI9Lc4TO/v78E1NTUBtbk5BMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADd3d0P0NnfUtPb4F3T29/L0tvf/tLc4PnT3ODf09zg/9Pc4P/S3N/x09zg/9Pc4P/S29/+09zg/9Pc
        4P/T3OD/09zg/9Lb3/7T3OD/09zg/9Lc3/HS29/+09zg/9Lb3+PS29/209zg/9Pb4NfS2t9i0drdVNDc
        3BYAAAAA0ODgIdLb3+zT3OD/09zg/9Pc4P/T3OD/09zg/9Pc4P/T3OD/09zg/9Pc4P/T3OD/09zg/9Pc
        4P/T3OD/09zg/9Pc4P/T3OD/09zg/9Pc4P/T3OD/09zg/9Pc4P/T3OD/09zg/9Pc4P/T3OD/09zg/9Pc
        4P/T3OD/0tvf9M7V3CXMzMwF09vgXdLb35zT2+Do09zg/9Pc4P/T3OD/09zg/9Pc4P/T3OD/09zg/9Pc
        4P/T3OD/09zg/9Pc4P/T3OD/09zg/9Pc4P/T3OD/09zg/9Pc4P/T3OD/09zg/9Pc4P/T3OD/09zg/9Pc
        4P/T3OD/0tzf7NLb4KDQ295dqv//AwAAAAAAAAAAAAAAAMzMzAXT2+Bd0tvg39Pc4P/T3OD/09zg/9Pc
        4P/T3OD/09zg/9Pc4P/T3OD/09zg/9Pc4P/T3OD/09zg/9Pc4P/T3OD/09zg/9Pc4P/T3OD/09zg/9Pc
        4P/T3OD/0tvf5tTc4Wba2toHAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADMzMwK09zflNLb
        3/7T3OD/09zg/9Pc4P/T3OD/09zg/9Pc4P/T3OD/09zg/9Pc4P/T3OD/09zg/9Pc4P/T3OD/09zg/9Pc
        4P/T3OD/09zg/9Pb36TM3d0PAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA09veV9Pb3/XT3OD/09zg/9Pc4P/S29/+1Nvfg1912F0vStT6L0rU+0hf1oXR2t9x09zg+tPc
        4P/T3OD/09zg/9Lb3/vR2t9qAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA09vgOtLc3+3T3OD/09zg/9Pb4J0XOdAWID3T8iE91P8hPdT/IDzT/iE6
        1T3R29+B09zg/9Pc4P/S29/2093gTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0dfdLdLb39rS2t/N3d3uDx490kshPdT/IT3U/yE9
        1P8hPdT/IDzUftTU1AbT3OC609zf5NHZ3j4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIDnVHyA9
        1PohPdT/IT3U/yE91P8gOtFPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAHjrSWyA81OQgPNPwHzzTggAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA//gf///yD///4gf//+IH///iB///4Af///AP///4H///8A///+AH///i
        B///wgf//+IH///gB///4Af//gAAf/gAAD/4DjAf+AYAH/gAAB/8AgA/+AAAH4AAAAEAAAAAAAAAAOAA
        AAf4AAAf/gAAf/8AAP//gAH///gf///8P/8=
</value>
  </data>
</root>